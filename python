#!/usr/bin/env bash

ROOT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" || exit; pwd)
PYTHON_VERSION=3.9.13

DEFAULT_PYENV_EXE=$HOME/.pyenv/bin/pyenv
PYENV_NAME=%PROJECT_LOWER%-$USER-$PYTHON_VERSION

VENV_HOME=$ROOT_DIR/.venv

if [[ -n $WHICH_PYTHON ]]; then
    VENV_PYTHON=$(which "$WHICH_PYTHON" 2> /dev/null)
else
    VENV_PYTHON=$VENV_HOME/bin/python3
fi

function print_error
{
    # shellcheck disable=SC2145
    echo -e "\033[31m$@\033[0m" 1>&2
}

function print_message
{
    # shellcheck disable=SC2145
    echo -e "\033[32m$@\033[0m"
}

trap 'cancel_black' INT

function cancel_black
{
    print_error "An interrupt signal was detected."
    exit 1
}

if [[ ! -x "$VENV_PYTHON" ]]; then
    PYENV_EXE=$(which pyenv 2> /dev/null)
    if [[ -z "$PYENV_EXE" ]]; then
        if [[ -x "$DEFAULT_PYENV_EXE" ]]; then
            PYENV_EXE=$DEFAULT_PYENV_EXE
        else
            print_error "Could not find executable pyenv command" 1>&2
            exit 1
        fi
    fi

    VIRTUALENV_VERSION=$("$PYENV_EXE" virtualenv --version 2> /dev/null)
    if [[ -z "$VIRTUALENV_VERSION" ]]; then
        print_error "Could not find pyenv-virtualenv" 1>&2
        exit 1
    fi

    AVAILABLE_INSTALL_VERSION=$(
        "$PYENV_EXE" install -l \
            | sed -n -e 's/^ *//g' -e '2,$p' \
            | grep --color=none -Fx "$PYTHON_VERSION"
    )

    if [[ -z "$AVAILABLE_INSTALL_VERSION" ]]; then
        print_error "Not found available python version: $PYTHON_VERSION" 1>&2
        print_error "Please update pyenv" 1>&2
        exit 1
    fi
fi

function find_pyenv_version
{
    local version
    version=$1

    "$PYENV_EXE" versions --bare | grep --color=never -Fx "$version"
}

function install_python_on_darwin
{
    print_message "Use the homebrew's OpenSSL, Zlib, SQLite"
    print_message " - ref: https://github.com/pyenv/pyenv/wiki/Common-build-problems"
    print_message "Install python '$PYTHON_VERSION' from pyenv (--enable-framework) ..."

    CFLAGS="-I$(brew --prefix openssl)/include -I$(brew --prefix zlib)/include -I$(brew --prefix sqlite)/include" \
    LDFLAGS="-L$(brew --prefix openssl)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix sqlite)/lib" \
    PYTHON_CONFIGURE_OPTS="--enable-framework" \
        "$PYENV_EXE" install "$PYTHON_VERSION"
}

function install_python_on_auto_detect
{
    print_message "Install python '$PYTHON_VERSION' from pyenv (--enable-shared) ..."

    PYTHON_CONFIGURE_OPTS="--enable-shared" \
        "$PYENV_EXE" install "$PYTHON_VERSION"
}

function install_python_if_not_exist
{
    if [[ -n $(find_pyenv_version "$PYTHON_VERSION") ]]; then
        return 0
    fi

    print_message "Not found '$PYTHON_VERSION' in pyenv"

    if [[ $(uname -s) == Darwin ]]; then
        install_python_on_darwin
    else
        install_python_on_auto_detect
    fi

    local code=$?
    if [[ $code -ne 0 ]]; then
        print_error "Python installation failed: $code"
        exit $code
    fi
}

function install_virtualenv_if_not_exist
{
    if [[ -n $(find_pyenv_version "$PYENV_NAME") ]]; then
        return 0
    fi

    print_message "Not found '$PYENV_NAME' in pyenv"
    print_message "Install '$PYENV_NAME' virtualenv based on '$PYTHON_VERSION'"

    "$PYENV_EXE" virtualenv "$PYTHON_VERSION" "$PYENV_NAME"
}

function enable_pyenv
{
    PYENV_ROOT="$("$PYENV_EXE" root)"
    PATH="$PYENV_ROOT/bin:$PATH"

    export PYENV_ROOT
    export PATH

    local platform
    platform=$(uname -s)

    case "$platform" in
    Darwin)
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
        return 0
        ;;
    Linux)
        eval "$(pyenv init --path)"
        eval "$(pyenv init -)"
        return 0
        ;;
    *)
        print_error "Unsupported platform: $platform"
        exit 1
    esac
}

function active_virtualenv
{
    local current
    current=$(pyenv version | awk '{print($1);}')

    if [[ "$current" != "$PYENV_NAME" ]]; then
        pyenv shell "$PYENV_NAME"
    else
        pyenv activate "$PYENV_NAME"
    fi
}

function exit_on_error
{
    local code=$?
    if [[ $code -ne 0 ]]; then
        exit $code
    fi
}

function run_base_python
{
    install_python_if_not_exist
    exit_on_error

    install_virtualenv_if_not_exist
    exit_on_error

    enable_pyenv
    exit_on_error

    active_virtualenv
    exit_on_error

    local base_python_exe
    base_python_exe=$(pyenv which python)

    if [[ -x "$base_python_exe" ]]; then
        "$base_python_exe" "$@"
    else
        print_error "The python executable could not be found"
        exit 1
    fi
}

if [[ ! -x "$VENV_PYTHON" ]]; then
    run_base_python -m venv "$VENV_HOME"
    if [[ -x "$VENV_PYTHON" ]]; then
        "$VENV_PYTHON" -m pip install -r "$ROOT_DIR/requirements.txt"
    fi
fi
if [[ ! -x "$VENV_PYTHON" ]]; then
    print_error "The venv's python executable could not be found." 1>&2
    exit 1
fi

PYTHONPATH="$ROOT_DIR:$PYTHONPATH" "$VENV_PYTHON" "$@"
